<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArchiveStartFolder" xml:space="preserve">
    <value>P:\\HolidayArchives</value>
  </data>
  <data name="BrowseBtnCaption" xml:space="preserve">
    <value>Browse...</value>
  </data>
  <data name="CancelBtnCaption" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CloseBtnCaption" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="DelBackupsBtnCaption" xml:space="preserve">
    <value>Delete Backup Files</value>
  </data>
  <data name="DelOldFilesBtnCaption" xml:space="preserve">
    <value>Delete Files From Previous Years</value>
  </data>
  <data name="DestLabelText" xml:space="preserve">
    <value>Destination</value>
  </data>
  <data name="DocTypeLabelText" xml:space="preserve">
    <value>Document Type(s)</value>
  </data>
  <data name="DocumentTypes" xml:space="preserve">
    <value>All Types#Bag Labels#Gift Labels#Donor and Master List#Participant List#Postcard Labels</value>
  </data>
  <data name="Doc_HTML" xml:space="preserve">
    <value>&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;Holiday Labels and Lists&lt;/title&gt;
&lt;/head&gt;
&lt;body style="cursor: auto;"&gt;
&lt;h1 style="text-align: center;"&gt;Holiday Labels and Lists User Documentation&lt;/h1&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Holiday Labels and Lists program (&amp;quot;HLL&amp;quot;)&amp;nbsp;is meant to be used in connection with Valley&amp;#39;s holiday programs. It streamlines the process of creating bag and gift labels, master and donor lists, participant lists, and postcard labels from VESTA reports.&lt;/p&gt;

&lt;p&gt;The focus of HLL&amp;#39;s display is the &amp;quot;Available Label and List Files&amp;quot; window. The items listed there are HLL&amp;#39;s &amp;quot;work product;&amp;quot; its reason for being.&lt;/p&gt;

&lt;p&gt;Other items in the program&amp;#39;s window are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Controls used to select which of the available label and list files to view. You can filter the view by file type (participant list, bag labels, etc.), year, and donor, and also select whether or not to view backup files.&lt;/li&gt;
	&lt;li&gt;Buttons to:
	&lt;ul&gt;
		&lt;li&gt;Process VESTA reports (that is, generate more label and list files)&lt;/li&gt;
		&lt;li&gt;Delete backup files in order to free up disk space&lt;/li&gt;
		&lt;li&gt;View this help file&lt;/li&gt;
		&lt;li&gt;Exit the program&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&amp;nbsp;&lt;/strong&gt;HLL does not create the VESTA reports; instead, it uses reports which have already been downloaded from VESTA. Also, HLL does not delete the VESTA reports, or change them in any way -- after you have added them, they will remain wherever you left them. You can even add them again if you want.&lt;/p&gt;

&lt;h2&gt;How to Use&lt;/h2&gt;

&lt;p&gt;Before using HLL, log in to VESTA and download one or more reports. Make sure to save them as Excel files, and remember where you save them. Then, start HLL, click &amp;quot;Process&amp;nbsp;VESTA Reports.&amp;quot; A standard Windows file selection dialog will open, allowing you to go to the folder containing your VESTA reports and select those reports (either one at a time or multiple files at once). HLL will then read the reports and use the information in them to create the appropriate label and list files.&lt;/p&gt;

&lt;p&gt;Once the VESTA reports have been processed, the files generated files&amp;nbsp;will show up in HLL under&amp;nbsp;&amp;quot;Available Label&amp;nbsp;and List Files.&amp;quot; Double-click on a file and&amp;nbsp;it will open up in Excel or Word as appropriate, for viewing or printing.&lt;/p&gt;

&lt;p&gt;When you process&amp;nbsp;VESTA reports, if the name of an output label or list file matches a file that already exists, the older file will be renamed. For example, if &amp;quot;Bag_Labels_2016_Clothing_XYZ.docx&amp;quot; is already there, the original will be renamed &amp;quot;Bag_Labels_2016_Clothing_XYZ.bak0001.docx,&amp;quot; &amp;quot;Bag_Labels_2016_Clothing_XYZ.bak0002.docx,&amp;quot; and so on. It&amp;#39;s possible that quite a few backup files could be generated after some time -- if so desired, the backup files can be deleted.&lt;/p&gt;

&lt;h2&gt;Where Are My Files?&lt;/h2&gt;

&lt;p&gt;HLL puts the files it generates into subfolders under the ##TOPLEVEL_OUTPUT FOLDER##. Files are sorted by year and by type. For example, for program year 2017, the files will be located as follows:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Bag and Gift Labels:&amp;nbssp;##TOPLEVEL_OUTPUT FOLDER##\2017\Christmas&lt;/li&gt;
	&lt;li&gt;Donor and Master Lists:&amp;nbsp;&amp;nbsp;##TOPLEVEL_OUTPUT FOLDER##\2017\Christmas&lt;/li&gt;
	&lt;li&gt;Participant Lists and Postcard Labels:
	&lt;ul&gt;
		&lt;li&gt;Adopt a Family:&amp;nbsp;&amp;nbsp;##TOPLEVEL_OUTPUT FOLDER##\2017\Christmas&lt;/li&gt;
		&lt;li&gt;Holiday Food Basket:&amp;nbsp;##TOPLEVEL_OUTPUT FOLDER##\2017\Christmas&lt;/li&gt;
		&lt;li&gt;Thanksgiving Basket:&amp;nbsp;##TOPLEVEL_OUTPUT FOLDER##\2017\Thanksgiving&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Anything else (eg Fans/Heaters):&amp;nbsp;##TOPLEVEL_OUTPUT FOLDER##\2017\Other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Backup files will be placed in the same folders as the files they&amp;#39;re backing up.&lt;/p&gt;

&lt;p&gt;There is no provision in HLL to delete anything other than backup files. If you want to delete non-backup label or list files, or VESTA reports, you can do that by going to the storage folder&amp;nbsp;via Windows Explorer and manually deleting the files.&lt;/p&gt;

&lt;h2&gt;Usage Tips&lt;/h2&gt;

&lt;ul&gt;
	&lt;li&gt;Instead of using many small VESTA reports, use a few larger ones. When you ask VESTA for the reports, you have the option of asking for reports for only a single donor and only a single report type (e.g., a Gift Label Report for Mike Albert Leasing). Instead of doing that, ask for a report for Toys and Clothing labels, both Gift and Bag, for all donors at once.&amp;nbsp;Then tell HLL to process that one big file. It will take a while (maybe several minutes) but is a much better use of your time than processing dozens of smaller reports individually!&lt;/li&gt;
	&lt;li&gt;Delete the backup files every once in a while. This may help the program run a little quicker and will also free up some disk space for other uses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Problems? Suggestions? Further Questions?&lt;/h2&gt;

&lt;h3&gt;I only see files for one donor!&lt;/h3&gt;

&lt;p&gt;Use the Donor &amp;quot;drop-down&amp;quot; selecter to pick another donor. If the donor you&amp;#39;re looking for isn&amp;#39;t there, verify that you&amp;#39;ve processed VESTA reports pertaining to that donor. If you&amp;#39;re unsure about a particular VESTA report, processing that report again will do no harm.&lt;/p&gt;

&lt;p&gt;(HLL does not have a &amp;quot;display files for all donors&amp;quot; option -- that would probably not be very comfortable to use because of the clutter.)&lt;/p&gt;

&lt;h3&gt;I don&amp;#39;t see bag/gift/donor/master files for a donor!&lt;/h3&gt;

&lt;p&gt;It may be that that particular donor is not participating in that particular program.&lt;/p&gt;

&lt;h3&gt;I have a suggestion for how to improve HLL, or I have another question or problem not address in this document.&lt;/h3&gt;

&lt;p&gt;The administrator of ##PROGEAM_NAME## is ##ADMIN_NAME##. You can email him at &lt;a href="mailto:##ADMIN_EMAIL##&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="ExitBtnCaption" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="HelpBtnCaption" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="IncludeBackupsChkCaption" xml:space="preserve">
    <value>Include Backup Files</value>
  </data>
  <data name="MaintBtnCaption" xml:space="preserve">
    <value>Manage Output Files</value>
  </data>
  <data name="SaveBtnCaption" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveFilesBtnCaption" xml:space="preserve">
    <value>Save Files</value>
  </data>
  <data name="SaveFilesFormTitle" xml:space="preserve">
    <value>Save Files</value>
  </data>
  <data name="SaveFolderDialogTitle" xml:space="preserve">
    <value>Select Folder for Document Destination</value>
  </data>
  <data name="YearLabelText" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="FileManagementHTML" xml:space="preserve">
    <value>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
    &lt;title&gt;Output File Management&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;HLL Output File Management&lt;/h1&gt;
    The File Management window offers you several functions designed to
    help you reduce clutter, save disk space, and preserve HLL's output
    files (the label and list documents). Here are brief summaries of
    the functions:&lt;br&gt;
    &lt;br&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;b&gt;Save Files:&lt;/b&gt; HLL creates its output files in an area
        designed only for temporary use. The files there are not
        protected from being replaced as new files are created. The
        "Save Files" function allows you to select label and list
        documents and copy them to a location of your choosing for
        archiving.&lt;br&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;b&gt;Delete Backup Files: &lt;/b&gt;When HLL creates a label or list
        document, if a file with the same name already exists, HLL
        renames the original file and replaces it with the new one. The
        original is retained, but now has "bak" in its name. The "Delete
        Backup Files" function deletes these backup files (you're
        probably way ahead of me here!) in order to save disk space.&lt;/li&gt;
      &lt;li&gt;&lt;b&gt;Delete Files From Previous Years: &lt;/b&gt;This function allows
        you to select one or more prior years and delete documents from
        those years from HLL's internal storage area. &lt;br&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;br&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <data name="OutOfBaseMsg" xml:space="preserve">
    <value>The folder {0} is within HLL's internal storage area. Please choose another folder that is not a subfolder of {1}.</value>
    <comment>0=chosen folder; 1=top-level of app's storage</comment>
  </data>
  <data name="OutOfBaseTitle" xml:space="preserve">
    <value>Please Choose Another Folder</value>
  </data>
  <data name="OutputFileManagementDocTitle" xml:space="preserve">
    <value>Management of Output Files</value>
  </data>
</root>